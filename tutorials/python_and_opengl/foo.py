import colorsys

from numpy import sqrt

import numpy as np
import pygame
from pygame.locals import *

from OpenGL.GL import *
from OpenGL.GLU import *

import os

os.environ['SDL_VIDEO_WINDOW_POS'] = "0,0"

R = sqrt(3)

vertices = {0: (0, -sqrt(3), 0), 1: (.5, -sqrt(3), -.5), 2: (.5, -sqrt(3), .5),
            3: (-.5, -sqrt(3), .5), 4: (-.5, -sqrt(3), -.5), 5: (0, -.5 * sqrt(3), 1),
            6: (1, -.5 * sqrt(3), 1), 7: (.5, 0, 1.5), 8: (-.5, 0, 1.5),
            9: (-1, -.5 * sqrt(3), 1), 10: (-1, -.5 * sqrt(3), 0), 11: (-1.5, 0, 0.5),
            12: (-1.5, 0, -0.5), 13: (-1, -.5 * sqrt(3), -1), 14: (0, -.5 * sqrt(3), -1),
            15: (-.5, 0, -1.5), 16: (.5, 0, -1.5), 17: (1, -.5 * sqrt(3), -1),
            18: (1, -.5 * sqrt(3), 0), 19: (1.5, 0, -.5), 20: (1.5, 0, .5),
            21: (1, 0, 1), 22: (1, .5 * sqrt(3), 1), 23: (-1, 0, 1),
            24: (-1, .5 * sqrt(3), 1), 25: (-1, 0, -1), 26: (-1, .5 * sqrt(3), -1),
            27: (1, 0, -1), 28: (1, .5 * sqrt(3), -1), 29: (0, .5 * sqrt(3), 1),
            30: (.5, sqrt(3), .5), 31: (-.5, sqrt(3), .5), 32: (-1, .5 * sqrt(3), 0),
            33: (-.5, sqrt(3), -.5), 34: (0, .5 * sqrt(3), -1), 35: (.5, sqrt(3), -.5),
            36: (1, .5 * sqrt(3), 0), 37: (0, sqrt(3), 0)
            }
edges = {0: (0, 1), 1: (1, 2), 2: (2, 0), 3: (0, 3), 4: (2, 3), 5: (0, 4), 6: (1, 4), 7: (3, 4),
         8: (2, 5), 9: (3, 5), 10: (2, 6), 11: (5, 6), 12: (5, 7), 13: (6, 7), 14: (5, 8),
         15: (7, 8), 16: (5, 9), 17: (8, 9), 18: (3, 9), 19: (3, 10), 20: (4, 10), 21: (9, 10),
         22: (9, 11), 23: (10, 11), 24: (10, 12), 25: (11, 12), 26: (10, 13),
         27: (12, 13), 28: (4, 13), 29: (1, 14), 30: (4, 14), 31: (13, 14), 32: (13, 15),
         33: (14, 15), 34: (14, 16), 35: (15, 16), 36: (14, 17), 37: (16, 17), 38: (1, 17),
         39: (6, 18), 40: (2, 18), 41: (1, 18), 42: (17, 18), 43: (18, 19), 44: (17, 19),
         45: (18, 20), 46: (19, 20), 47: (6, 20), 48: (7, 21), 49: (6, 21), 50: (20, 21),
         51: (20, 22), 52: (21, 22), 53: (7, 22), 54: (11, 23), 55: (9, 23), 56: (8, 23),
         57: (11, 24), 58: (23, 24), 59: (8, 24), 60: (15, 25), 61: (13, 25), 62: (12, 25),
         63: (15, 26), 64: (25, 26), 65: (12, 26), 66: (19, 27), 67: (17, 27), 68: (16, 27),
         69: (19, 28), 70: (27, 28), 71: (16, 28), 72: (24, 29), 73: (8, 29), 74: (7, 29),
         75: (22, 29), 76: (22, 30), 77: (29, 30), 78: (24, 31), 79: (29, 31), 80: (30, 31),
         81: (26, 32), 82: (12, 32), 83: (11, 32), 84: (24, 32), 85: (31, 32), 86: (26, 33),
         87: (32, 33), 88: (31, 33), 89: (28, 34), 90: (16, 34), 91: (15, 34), 92: (26, 34),
         93: (33, 34), 94: (28, 35), 95: (34, 35), 96: (33, 35), 97: (28, 36), 98: (35, 36),
         99: (30, 36), 100: (22, 36), 101: (20, 36), 102: (19, 36), 103: (35, 30),
         104: (35, 37), 105: (33, 37), 106: (31, 37), 107: (30, 37)
         }
surfaces = {0: (0, 1, 2), 1: (0, 2, 3), 2: (0, 3, 4), 3: (0, 4, 1), 4: (2, 5, 3), 5: (2, 6, 5),
            6: (5, 6, 7), 7: (5, 7, 8), 8: (5, 8, 9), 9: (3, 5, 9), 10: (3, 10, 4),
            11: (3, 9, 10), 12: (9, 11, 10), 13: (10, 11, 12), 14: (10, 12, 13), 15: (4, 10, 13),
            16: (1, 4, 14), 17: (4, 13, 14), 18: (13, 15, 14), 19: (14, 15, 16), 20: (14, 16, 17),
            21: (1, 14, 17), 22: (2, 18, 6), 23: (1, 18, 2), 24: (1, 17, 18), 25: (17, 19, 18),
            26: (18, 19, 20), 27: (6, 18, 20), 28: (6, 21, 7), 29: (6, 20, 21), 30: (20, 22, 21),
            31: (7, 21, 22), 32: (9, 23, 11), 33: (8, 23, 9), 34: (11, 23, 24), 35: (8, 24, 23),
            36: (13, 25, 15), 37: (12, 25, 13), 38: (15, 25, 26), 39: (12, 26, 25),
            40: (17, 27, 19), 41: (16, 27, 17), 42: (19, 27, 28), 43: (16, 28, 27),
            44: (8, 29, 24), 45: (7, 29, 8), 46: (7, 22, 29), 47: (22, 30, 29), 48: (29, 30, 31),
            49: (24, 29, 31), 50: (12, 32, 26), 51: (11, 32, 12), 52: (11, 24, 32),
            53: (24, 31, 32), 54: (26, 32, 33), 55: (31, 33, 32), 56: (16, 34, 28),
            57: (15, 34, 16), 58: (15, 26, 34), 59: (26, 33, 34), 60: (28, 34, 35),
            61: (33, 35, 34), 62: (28, 35, 36), 63: (30, 36, 35), 64: (22, 36, 30),
            65: (20, 36, 22), 67: (19, 36, 20), 68: (19, 28, 36), 69: (28, 35, 36),
            70: (30, 37, 31), 71: (31, 37, 33), 72: (33, 37, 35), 73: (35, 37, 30)
            }


def cmap(x, hue=50):
    v = 0.4 + 0.6 * np.clip((1 - x) / 2, 0, 1)
    c = colorsys.hsv_to_rgb(0.33, 0.5, v)
    # v = 0.4 + 0.4 * np.clip((1 - x) / 2, 0, 1)
    return c
    # return cm.Greens(v)[:3]


def Cube():
    glBegin(GL_TRIANGLES)
    for ii, s in surfaces.items():
        a = np.array(vertices[s[1]]) - np.array(vertices[s[0]])
        b = np.array(vertices[s[2]]) - np.array(vertices[s[0]])
        axb = np.cross(a, b)  # get vector pointing straight up from surface
        axb = axb / sqrt(np.sum(axb ** 2))
        light = np.array([2, 3, 1])
        light = light / sqrt(np.sum(light ** 2))

        frontwardness = np.dot(axb, light)  # see how much it points
        frontwardness = np.dot(axb, light)  # see how much it points
        # forwards
        c = cmap(frontwardness)

        glColor3fv(c)
        for vertex in s:
            glVertex3fv(vertices[vertex])
    glEnd()

    # glBegin(GL_LINES)
    # glColor3fv((1, 1, 1))
    # for ii, edge in edges.items():
    #     for vertex in edge:
    #         glVertex3fv(vertices[vertex])
    # glEnd()


def main():
    pygame.init()
    display = (1920, 1050)
    # display = (800, 600)
    pygame.display.set_mode(display, DOUBLEBUF | OPENGL)

    gluPerspective(45, (display[0] / display[1]), 0.1, 50.0)

    glTranslatef(0.0, -1, -15)
    glRotatef(30, 1, 0, 0)

    glEnable(GL_DEPTH_TEST)
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()

        glRotatef(3, 0, 1, 0)
        # glRotatef(0, 0, 1, 1)
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
        Cube()
        pygame.display.flip()
        pygame.time.wait(10)


main()
